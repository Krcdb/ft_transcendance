_______________________________________________________________________
_____  __        __    __
  |   /  \  __  |  \  /  \
  |   \__/      |__/  \__/
_______________________________________________________________________
[OK]    rentrer dans le container et essayer d'explorer la db
[OK]    essayer de faire un dump depuis l'interieur et voir a quoi ca
            ressemble
[OK]    creer des nouveaux users avec insomnia
[OK]    sauvegarder ces users d'un build a l'autre, on peut essayer de les
            hardcoder mais si y'a moyen de faire plus propre c'est mieux
[NON]   importer le dump
[NON]   explorer la db avec pgadmin
[ ]     simplifier les fonctions de service (au lieu de toujours utiliser
            find/save, essayer d'utiliser des fonctions plus pertinentes
            pour gagner en lignes de code et en efficacité)
[ ]     Rediger des securites ?? un user qui n'est pas dans un channel ne peut pas y
            poster etc...
_______________________________________________________________________
QUESTIONS :
_______________________________________________________________________

- Amitiés a sens unique ? Demande puis acceptation ?
  >> resolu, c'est a sens unique comme sur stud42
- Comment gerer le ladder level ?


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * * * * * * * * * * * JOURNAL DE BORD * * * * * * * * * * * * * * * 
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

[8 novembre]
Putain ca a enfin marché !!! Du coup pas de yaml...

[2 novembre]
Je suis tres contente de ma refonte, ca marche nickel avec les IDs !!
En plus maintenant j'arrive bien a acceder a mes services et mes
repositories d'ou j'en ai besoin, et j'ai éliminé la dépendance circulaire.
J'ai ecrit beaucoup de setters/getters ces derniers jours, j'ai testé
ceux que je pouvais avec insomnia (ceux qui ont des dto en gros) du coup
je suis ready pour push sur master !!
>> A faire la prochaine fois :
- ecrire les fonctions de delete
- tester MATCH, ma derniere entités pas testée

*********************************************************************

[29 octobre]
Je suis arrivée au bout de ma demarche avec les relations de tables de
TypeORM, mais je me rend compte que c'est très fastidieux, surtout qu'a
priori il ne gere pas les arrays, et on en a beaucoup. Du coup, je pense
enlever toutes les relations de table pour pouvoir continuer a utiliser
les arrays, juste au lieu de stocker des references d'entités, je vais
stocker des IDs, ce sera beaucoup plus simple.
A faire demain donc.

*********************************************************************

[27 octobre]
L'importation du dump echoue toujours, enfin non l'importation se passe
officiellement bien d'apres les logs de compilation, mais je ne recupere
pas mes users, je sais pas pourquoi. Ptet que Servane a raison, que c'est
les images qui font chier dans la colle. Demain j'essaierai de recreer
le fichier de dump sans les images.
Sinon j'ai reussi a compiler les relations entre MATCH et USER, je m'attaque
maintenant au CHAT :
        |Module |Service    |Controller | Entity    | DTO
CHAT    |   OK  |  NO NEED  | NO NEED   | NO NEED   | NO NEED
CHANNEL |   OK  |   OK      |           |   OK      |  EUH...
MESSAGE |   OK  |   OK      |     OK    |   OK      |  EUH...

*********************************************************************

[25 octobre]
J'ai réussi a faire un dump !! (bon j'arrive pas a post d'autres users
depuis l'authentification donc il sert un peu a rien pour l'instant)
Voila la marche a suivre :
1) ouvrir un shell dans le container postgres
2) créer le fichier avec "pg_dump postgres -U admin > usersDB.sql"
(pas besoin d'etre dans la console postgres)
3) depuis un autre terminal, copier le fichier hors du container :
docker cp <containerID>:/usersDB.sql /host/path
4) (pas essayé encore) Importer le fichier avec la commande :
IMPORT usersDataBase.sql

Notes sur la console postgress :
Logging-in as admin :   psql -d postgres -U admin
Listing existing dbs :  \l || \list
Switching databases :   \c dbname || \connect dbname
Listing tables in db :  \dt

Useful docker command : docker system prune -a
-> This will remove:
  - all stopped containers
  - all networks not used by at least one container
  - all images without at least one container associated to them
  - all build cache

*********************************************************************

[22 octobre]
Useful Repository Methods :
- rep.getId(user) : returns PrimaryColumn info
- rep.create() || rep.create( { a: 1, b: 2} ) : creates a new User
- rep.merge(user, {b: 1}) : merges user properties
- rep.save(user) || rep.save([ cat1, cat2, cat3 ]) : saves the user in db
- remove
- insert
- update
- delete
- rep.count({a: 1}) : counts the user with value 1 as their A property
- rep.increment/decrement(User, {a: 1}, "b", 1) : increments or
decrements 1 to the value of the B property in users with value 1 as 
their A property
- find

*********************************************************************

[20 octobre]
J'ai ecrit toutes les propriétés auxquelles je pouvais penser dans les
entities USER, MATCH, MESSAGE et CHANNEL. Le seul truc qui manque c'est 
mettre les JoinColumn/Table() au bon endroit mais je dois encore y 
reflechir... De toute facon la DB ne compile pas si il y a des trous.
Si je veux faire des tests il faut que je mette {nullable: true} sur 
toutes mes propriétés.

*********************************************************************

[19 octobre]
Je commence a comprendre les relations entre entities sur TypeORM,
il me manque plus que ManyToMany a voir. J'ai ecrit une entity pour
les matches, il faudra que je la modifie selon ce que mederic a fait.
Sinon j'ai mis au propre ma vieille liste sur un draw.io.

*********************************************************************

[18 octobre]
Database structure :
USER entity :
    userName (string)
    intraId ()
    isOnline (bool)
    isInGame (bool)
    avatar (string)
    nbVictories (number)
    nbLosses (number)
    ladderLevel (number)
    achievements (string[])
    friends (number[] (avec intraId) ou string[] (avec userName))
    blackList (number[] (avec intraId) ou string[] (avec userName))
    matchHistory ()
MATCH entity :
    leftPlayer (string or number)
    rightPlayer (string or number)
    leftPlayerScore (number)
    rightPlayerScore (number)
    victor (string or number)
    leftBarPositionY (number)
    rightBarPositionY (number)
    ballPositionX (number)
    ballPositionY (number)
CHAT entity :
    ??? needed features : isOnline, blockUser, addFriend

*******************************************************

[14 octobre]
A mettre en script pour automatiser les dumps :
brew install postgresql
pg_dump postgres > usersDataBase.sql
IMPORT usersDataBase.sql
--> en fait ca marche pas les dumps, je change de technique
---> en fait SI, CA MARCHE, il suffisait juste de les faire
au bon endroit a savoir a l'interieur du container postgres
(cf. update du 25 octobre)

Using migrations instead :
npm i -g typeorm
typeorm migration:create
typeorm migration:run