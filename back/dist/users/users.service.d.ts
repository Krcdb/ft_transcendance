import { Repository } from 'typeorm';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserNameDto } from './dto/update-userName.dto';
import { User } from './user.entity';
import { enumAchievements } from 'src/achievements/achievements';
import { AchievementsInterface } from 'src/achievements/achievements';
import { MatchService } from 'src/match/match.service';
import { Match } from 'src/match/match.entity';
export declare class UsersService {
    private readonly usersRepository;
    private readonly matchService;
    constructor(usersRepository: Repository<User>, matchService: MatchService);
    create(createUserDto: CreateUserDto): Promise<User>;
    setAchievementAsync(userId: number, achiev: enumAchievements): Promise<User>;
    setAchievement(user: User, achiev: enumAchievements): void;
    getUsersInTab(usersIds: number[]): Promise<User[]>;
    findOrCreate(id: number, userName: string): Promise<any>;
    findAll(): Promise<User[]>;
    findOne(id: number): Promise<User>;
    remove(id: number): Promise<void>;
    userExists(id: number): Promise<boolean>;
    userNameAlreadyExists(name: string): Promise<boolean>;
    setAvatar(id: number, avatarUrl: string): Promise<User>;
    getAvatar(id: number): Promise<String>;
    DeleteOldAvatarFile(id: number): Promise<void>;
    removeAvatar(id: number): Promise<void>;
    updateUserName(id: number, updateUserNameDto: UpdateUserNameDto): Promise<User>;
    updateLogState(id: number, isLog: boolean): Promise<User>;
    updateGameState(id: number, isInGame: boolean): Promise<User>;
    getAchievements(id: number): Promise<AchievementsInterface[]>;
    findAllPlayersMatchHistory(userId: number, matches: Match[]): Promise<User[]>;
    updateLadderLevel(winnerId: number, loserId: number): Promise<void>;
    getFriends(id: number): Promise<User[]>;
    getBlocked(id: number): Promise<User[]>;
    getUsersexceptBlocked(id: number): Promise<User[]>;
    addAsFriend(userId: number, id: number): Promise<string>;
    removeFromFriends(userId: number, id: number): Promise<string>;
    addAsBlocked(userId: number, blockedId: number): Promise<string>;
    removeFromBlocked(userId: number, blockedId: number): Promise<string>;
    settwoFAuthSecret(secret: string, id: number): Promise<import("typeorm").UpdateResult>;
    turnOnTwoFAuth(id: number): Promise<import("typeorm").UpdateResult>;
    turnOffTwoFAuth(id: number): Promise<import("typeorm").UpdateResult>;
}
